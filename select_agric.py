# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SelectAgric
                                 A QGIS plugin
 Suporte a decisão para seleção de áreas agricolas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Thomaz Costa
        email                : thomaz.costa@embrapa.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMainWindow, QPushButton, QToolTip, QLabel, QTextEdit, QMessageBox
from qgis.core import *
from qgis.utils import iface

import math
import numpy as np

import grass.script
from osgeo import ogr, osr, gdal

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .select_agric_dialog import SelectAgricDialog
import os.path

import processing
import os

from qgis.core import (
QgsApplication,
QgsDataSourceUri,
QgsCategorizedSymbolRenderer,
QgsClassificationRange,
QgsPointXY,
QgsProject,
QgsExpression,
QgsField,
QgsFields,
QgsFeature,
QgsFeatureRequest,
QgsFeatureRenderer,
QgsGeometry,
QgsGraduatedSymbolRenderer,
QgsMarkerSymbol,
QgsMessageLog,
QgsRectangle,
QgsRendererCategory,
QgsRendererRange,
QgsSymbol,
QgsVectorDataProvider,
QgsVectorLayer,
QgsVectorFileWriter,
QgsWkbTypes,
QgsSpatialIndex,
QgsVectorLayerUtils
)

from qgis.core.additions.edit import edit
from qgis.PyQt.QtGui import (
QColor,
)

QgsApplication.instance().arguments()

class SelectAgric:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SelectAgric_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SelectAgric')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SelectAgric', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/select_agric/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SelectAgric'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SelectAgric'),
                action)
            self.iface.removeToolBarIcon(action)

    def variaveis(self):
        """define variaveis utilizadas na funcao run"""

         # Variavel escolha (Carta, Municipio ou Mesoregiao)
        # Carta = 0 / Municipio = 1/ Mesoregiao = 2
        self.escolha = self.dlg.spinBox_5.value()

        # Variaveis para Declividade
        self.decliv_min = self.dlg.doubleSpinBox.value()
        self.decliv_max = self.dlg.doubleSpinBox_2.value()

        # Variaveis para conversão utm
        self.zona = self.dlg.spinBox_2.value()

        # Variavel para tile (carta 1:250.000)
        self.carta = self.dlg.textEdit.toPlainText()

         # Variavel para Municipios
        self.munic = self.dlg.textEdit.toPlainText()

        # Variavel para Mesoregioes
        self.meso = self.dlg.textEdit.toPlainText()

        # Variável para Degr.Past
        self.degrpast = self.dlg.spinBox.value()

        # Variável para Aptidão Agricola Pedoecol CNPS
        self.aptagric = self.dlg.spinBox_3.value()

        # Variável para área mínima (ha)
        self.area_min = self.dlg.spinBox_4.value()

    def ESPG(self):
        if self.zona == 22:
            self.ESPG = 31982
        elif self.zona == 23:
            self.ESPG = 31983
        elif self.zona == 24:
            self.ESPG = 31984
        else:
            print("Digite a zona corretamente! ex. 23")
        return self.ESPG 

    def lista_param_result (self):

        lista_param = [str(self.decliv_min),str(self.decliv_max),'1',str(self.decliv_max),'60000','0'\
    ,'-33000',str(self.decliv_min),'0']
        return lista_param
            
    def lista_param_result1(self):
        if self.degrpast == 0:
            lista_param = ['1', '4', '1']
        if self.degrpast == 1:
            lista_param = ['1', '2', '1','2', '4', '0']
        elif self.degrpast == 2:
            lista_param = ['1', '2', '0','2', '3', '1','3','4','0']
        elif self.degrpast == 3:
            lista_param = ['1', '3', '0','3','4','1']
        else:
            print("Parametro incorreto! digite 1, 2 ou 3")
        return lista_param

    def lista_param_result2(self):    
            
        if self.aptagric == 1:
            lista_param = ['0', '1', '0', '1', '2', '1','2', '13', '0']
        elif self.aptagric == 2:
            lista_param = ['0', '2', '0','2', '3', '1','3','13','0']
        elif self.aptagric == 3:
            lista_param = ['0', '3', '0','3', '4', '1','4','13','0']
        elif self.aptagric == 4:
            lista_param = ['0', '4', '0','3', '5', '1','5','13','0']
        elif self.aptagric == 5:
            lista_param = ['0', '5', '0','5', '6', '1','6','13','0']
        elif self.aptagric == 6:
            lista_param = ['0', '6', '0','6', '7', '1','7','13','0']
        elif self.aptagric == 7:
            lista_param = ['0', '7', '0','7', '8', '1','8','13','0']
        elif self.aptagric == 8:
            lista_param = ['0', '8', '0','8', '9', '1','9','13','0']
        elif self.aptagric == 9:
            lista_param = ['0', '9', '0','9', '10', '1','10','13','0']
        elif self.aptagric == 10:
            lista_param = ['0', '10', '0','10', '11', '1','11','13','0']
        elif self.aptagric == 11:
            lista_param = ['0', '11', '0','11', '12', '1','12','13','0']
        elif self.aptagric == 12:
            lista_param = ['0', '12', '0','12', '13', '1']

        else: print('Parametro incorreto! digite um número entre 1 e 12')
        return lista_param

    # Method to debug the code without the need of installing a remote debugger
    def debugObject(self, obj):
        QMessageBox.information(self.iface.mainWindow(), "Debug", obj)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SelectAgricDialog()

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed

        if result:
             # chamando as variaveis
            self.variaveis()

            if self.escolha == 0:
                self.var = self.carta
            if self.escolha == 1:
                self.var = self.munic
            if self.escolha == 2:
                self.var = self.meso

            #-------------------------------------------------------
            # ------------------------------------------------------
            # clas_decliv.py

            # parametros clas_decliv, degr_past, apt_agric
            lista_param = self.lista_param_result()
            lista_param1 = self.lista_param_result1()
            lista_param2 = self.lista_param_result2()

            carta = self.carta
            espg = self.ESPG

           # acessa layer do CAR (limites de propriedades)
            dir_layer0 = 'C:/PyQGIS/Dados/AREA_IMOVEL_1.shp' 
            vlayer0 = QgsVectorLayer(dir_layer0, "propriedades", "ogr")
            if not vlayer0.isValid():
                print("Layer failed to load!")
            # else:
            #     QgsProject.instance().addMapLayer(vlayer)

            if self.escolha == 0:
                # acessa Carta topografica 1:250.000
                dir ='C:/PyQGIS/Dados/Cartas_250000/'
                file = str(carta) +'.tif'
                dir_file = dir + file

                if (os.path.exists(dir_file)): 
                    iface.addRasterLayer(dir_file)
                else:
                    self.debugObject('Carta 1:250.000 não disponível')

                # acessa layer de articulaçoes do IBGE (cartas)
                dir_layer = 'C:/PyQGIS/Dados/Layers_Articulacoes_IBGE_250000_sirgas2000.shp'

                vlayer = QgsVectorLayer(dir_layer, "Articul_250000", "ogr")
                if not vlayer.isValid():
                    print("Layer failed to load!")
                # else:
                #     QgsProject.instance().addMapLayer(vlayer)

            if self.escolha == 1:
                # acessa layer de Municipios
                dir_layer = 'C:/PyQGIS/Dados/MG_Municipios_2022.shp'

                vlayer = QgsVectorLayer(dir_layer, "MG_Municipios_2022", "ogr")
                if not vlayer.isValid():
                    print("Layer failed to load!")
                # else:
                #     QgsProject.instance().addMapLayer(vlayer)

            if self.escolha == 2:
                # acessa layer de Mesoregioes
                dir_layer = 'C:/PyQGIS/Dados/MG_Mesorregioes_2022.shp'

                vlayer = QgsVectorLayer(dir_layer, "MG_Mesoregioes_2022", "ogr")
                if not vlayer.isValid():
                    print("Layer failed to load!")
                # else:
                #     QgsProject.instance().addMapLayer(vlayer)

             # direcionando para o dir da zona para selecionar o DEM
            pasta = r'C:/PyQGIS/Dados/'
            file = 'NasaDEM_MG-1_Z'+str(self.zona)+'_utm.tif'

            # acessa DEM da zona
            dir_layer2 = pasta + file
            rlayer = QgsRasterLayer(dir_layer2, "NasaDEM")
            if not rlayer.isValid():
                print("Layer failed to load!")
            # else:
            #     QgsProject.instance().addMapLayer(rlayer)

            if self.escolha == 0:
                # acesso as cartas pela tabela de atributos do layer de articulaçoes do IBGE
                atributos = vlayer.getFeatures()
                nomeCampo = 'Name'

                indiceCampo = vlayer.fields().indexOf(nomeCampo)

                for atributo in atributos:
                    cartas = atributo.attributes()[indiceCampo]

                    if carta in cartas:
                        
                        #saida = 'D:/Usuarios/AProSEG_Pastagem/'+ carta + '.shp'
                        
                        # gera a carta.shp
                        temporario = processing.run("native:extractbyattribute",
                                    {'INPUT': vlayer,
                                        'FIELD': nomeCampo,
                                        'OPERATOR': 0,
                                        'VALUE': carta,
                                        'OUTPUT': 'memory:'})
                        
            if self.escolha == 1:
                # acesso ao municipio pela tabela de atributos do layer de Municipios de MG
                atributos = vlayer.getFeatures()
                nomeCampo = 'NM_MUN'

                indiceCampo = vlayer.fields().indexOf(nomeCampo)

                munic = self.munic

                for atributo in atributos:
                    munics = atributo.attributes()[indiceCampo]

                    if munic in munics:
                        
                        #munic = 'D:/Usuarios/AProSEG_Pastagem/'+ munic + '.shp'
                        
                        # gera o municipio.shp
                        temporario = processing.run("native:extractbyattribute",
                                    {'INPUT': vlayer,
                                        'FIELD': nomeCampo,
                                        'OPERATOR': 0,
                                        'VALUE': munic,
                                        'OUTPUT': 'memory:'})    

            if self.escolha == 2:
                # acesso a mesoregiao pela tabela de atributos do layer de mesoregioes de MG
                atributos = vlayer.getFeatures()
                nomeCampo = 'NM_MESO'

                indiceCampo = vlayer.fields().indexOf(nomeCampo)

                meso = self.meso

                for atributo in atributos:
                    mesos = atributo.attributes()[indiceCampo]

                    if meso in mesos:
                        
                        #munic = 'D:/Usuarios/AProSEG_Pastagem/'+ munic + '.shp'
                        
                        # gera o municipio.shp
                        temporario = processing.run("native:extractbyattribute",
                                    {'INPUT': vlayer,
                                        'FIELD': nomeCampo,
                                        'OPERATOR': 0,
                                        'VALUE': meso,
                                        'OUTPUT': 'memory:'})    

             # Recorta layer propriedades (CAR)
            car = 'C:/PyQGIS/propried_' + self.var + '.shp'

            processing.run("native:clip", {'INPUT':vlayer0,\
            'OVERLAY':temporario['OUTPUT'], 'OUTPUT':car})

            vlayer_car = QgsVectorLayer(car, "propried", "ogr")
            if not vlayer.isValid():
                print("Layer failed to load!")
            else:
                QgsProject.instance().addMapLayer(vlayer_car)

            # --------------------------------------------------------------
            # criando arquivo de saida para o grass
            fnm_input = pasta + file
            fnm_output = pasta + 'saida.tif'

            # abrir arquivo entrada em modo leitura (parametro 0)
            rst_input = gdal.Open(fnm_input, 0)

            # carregar a banda 1 da camada de entrada para matriz numpy:
            # matriz = rst_input.GetRasterBand(1).ReadAsArray()

            # Obter metadados da camada de entrada e criar camada de saída
            # carregar driver para GeoTiff
            driver_tiff = gdal.GetDriverByName('GTiff')

            # criar raster de saída com metadados da camada de entrada
            x = rst_input.RasterXSize
            y = rst_input.RasterYSize

            # camada raster de saída
            rst_out = driver_tiff.Create(fnm_output, xsize=x, ysize=y,\
            bands=1, eType=gdal.GDT_Float32)

            # configurar geotransformaçao com base na camada de entrada
            rst_out.SetGeoTransform(rst_input.GetGeoTransform())

            # obter o tamanho da celula
            cellsize = np.abs(rst_input.GetGeoTransform()[1])

            # configurar projecao com base na camada de entrada
            rst_out.SetProjection(rst_input.GetProjection())

            # ler banda 1 da camada de saida
            bnd1 = rst_out.GetRasterBand(1).ReadAsArray()

            # EXPORTAR CAMADA DE SAIDA
            #sobrescrever a banda 1 do raster de saida
            rst_out.GetRasterBand(1).WriteArray(bnd1)

            # fechar a camada
            rst_out = None
            # --------------------------------------------------------------  
        
            dem = 'C:/PyQGIS/Dem_' + self.var + '.tif'

            # recorta o DEM pelo limite da carta
            processing.run("gdal:cliprasterbymasklayer",
                        {'INPUT': rlayer,
                            'MASK': temporario['OUTPUT'],
                            'SOURCE_CRS': 'EPSG:'+str(self.zona)+'-SIRGAS 2000/UTM Zone'+str(self.zona)+'S',
                            'TARGET_CRS': 'EPSG:'+str(self.zona)+'-SIRGAS 2000/UTM Zone'+str(self.zona)+'S',
                            'TARGET_EXTENT': None,
                            'NODATA': 0,
                            'ALPHA_BAND': False,
                            'CROP_TO_CUTLINE': True,
                            'KEEP_RESOLUTION': False,
                            'SET_RESOLUTION': False,
                            'X_RESOLUTION': x,
                            'Y_RESOLUTION': y,
                            'MULTITHREADING': False,
                            'OPTIONS': '',
                            'DATA_TYPE': 0,
                            'EXTRA': '',
                            'OUTPUT': dem})
            
            #  # carregando o resultado em tela
            # iface.addRasterLayer(dem_carta)
            
            slope = 'C:/PyQGIS/Slope_' + self.var + '.tif'
            
            # calcula declividade %
            processing.run("grass7:r.slope.aspect", {
                            'elevation': dem,
                            'format':1,
                            'precision':0,
                            '-a':True,
                            '-e':False,
                            '-n':False,
                            'zscale':1,
                            'min_slope':0,
                            'slope': slope,
                            'GRASS_REGION_PARAMETER':None,'GRASS_REGION_CELLSIZE_PARAMETER':0,
                            'GRASS_RASTER_FORMAT_OPT':'',
                            'GRASS_RASTER_FORMAT_META':''})
            
            #  # carregando o resultado em tela
            # iface.addRasterLayer(slope_carta)

            clas_slope = 'C:/PyQGIS/ClasSlope_' + self.var + '.tif'

            # classes de declividade pela a escolha do usuario
            processing.run("native:reclassifybytable", {
            'INPUT_RASTER':slope,
            'RASTER_BAND':1,
            'TABLE': lista_param,
            'NO_DATA':0,
            'RANGE_BOUNDARIES':1,
            'NODATA_FOR_MISSING':False,
            'DATA_TYPE':5,
            'OUTPUT': clas_slope
            })

            # carregando o resultado em tela
            iface.addRasterLayer(clas_slope)

            #-------------------------------------------------------
            #-------------------------------------------------------
            # PROCESSA LAYER DEGRADACAO PASTAGENS DA UFG

            pasta = 'C:/PyQGIS/Dados/'
            file = 'Pastagem_MapBiomas_2022.tif'

            # acessa Pastagem da UFG da zona
            dir_layer2 = pasta + file
            rlayer = QgsRasterLayer(dir_layer2, "Pastagem_MapBiomas")
            if not rlayer.isValid():
                print("Layer failed to load!")

            # QgsProject.instance().addMapLayer(rlayer)

            # acesso as cartas pela tabela de atributos do layer de articulaçoes do IBGE

            past = 'C:/PyQGIS/Pastagem_' + self.var + '.tif'
        
            # recorta Pastagem pelo limite da carta
            processing.run("gdal:cliprasterbymasklayer",
                        {'INPUT': rlayer,
                            'MASK': temporario['OUTPUT'],
                            'SOURCE_CRS': None,
                            'TARGET_CRS': 'EPSG:'+str(self.zona)+'-SIRGAS 2000/UTM Zone'+str(self.zona)+'S',
                            'TARGET_EXTENT': None,
                            'NODATA': 0,
                            'ALPHA_BAND': False,
                            'CROP_TO_CUTLINE': True,
                            'KEEP_RESOLUTION': False,
                            'SET_RESOLUTION': False,
                            'X_RESOLUTION': 30,
                            'Y_RESOLUTION': 30,
                            'MULTITHREADING': False,
                            'OPTIONS': '',
                            'DATA_TYPE': 0,
                            'EXTRA': '',
                            'OUTPUT': past})
            
            #  # carregando o resultado em tela
            # iface.addRasterLayer(past_carta)

            clas_past = 'C:/PyQGIS/ClasPast_' + self.var + '.tif'

            # classes de degradacao pastagem pela escolha do usuario
            processing.run("native:reclassifybytable", {
                'INPUT_RASTER': past,
                'RASTER_BAND': 1,
                'TABLE': lista_param1,
                'NO_DATA': 0,
                'RANGE_BOUNDARIES': 1,
                'NODATA_FOR_MISSING': False,
                'DATA_TYPE': 5,
                'OUTPUT': clas_past
            })

            # carregando o resultado em tela
            #iface.addRasterLayer(clas_past)
            # pass

            # ----------------------------------------------------
            # ----------------------------------------------------
            # PROCESSA LAYER APTIDAO AGRICOLA do CNPS

            pasta = 'C:/PyQGIS/Dados/'
            file = 'pedoecol_mg.tif'

            # acessa pedoecol da zona
            dir_layer2 = pasta + file
            rlayer = QgsRasterLayer(dir_layer2, "pedoecol_mg")
            if not rlayer.isValid():
                print("Layer failed to load!")

            # QgsProject.instance().addMapLayer(rlayer)

            # acesso as cartas pela tabela de atributos do layer de articulaçoes do IBGE (temporario)

            aptagric = 'C:/PyQGIS/AptAgric_' + self.var + '.tif'

            # recorta pedoecol_mg do CNPS pelo limite da carta
            processing.run("gdal:cliprasterbymasklayer",
                        {'INPUT': rlayer,
                            'MASK': temporario['OUTPUT'],
                            'SOURCE_CRS': 'EPSG:4674 - SIRGAS 2000',
                            'TARGET_CRS': 'EPSG:'+str(self.zona)+'-SIRGAS 2000/UTM Zone'+str(self.zona)+'S',
                            'TARGET_EXTENT': None,
                            'NODATA': 0,
                            'ALPHA_BAND': False,
                            'CROP_TO_CUTLINE': True,
                            'KEEP_RESOLUTION': False,
                            'SET_RESOLUTION': False,
                            'X_RESOLUTION': 30,
                            'Y_RESOLUTION': 30,
                            'MULTITHREADING': False,
                            'OPTIONS': '',
                            'DATA_TYPE': 0,
                            'EXTRA': '',
                            'OUTPUT': aptagric})
            
            #  # carregando o resultado em tela
            # iface.addRasterLayer(AptAgric_carta)

            clas_aptagric = 'C:/PyQGIS/ClasAptAgric_' + self.var + '.tif'

            # classes de degradacao pastagem pela a escolha do usuario
            processing.run("native:reclassifybytable", {
                'INPUT_RASTER': aptagric,
                'RASTER_BAND': 1,
                'TABLE': lista_param2,
                'NO_DATA':0,
                'RANGE_BOUNDARIES':1,
                'NODATA_FOR_MISSING':False,
                'DATA_TYPE':5,
                'OUTPUT': clas_aptagric
            })

            # carregando o resultado em tela
            #iface.addRasterLayer(clas_aptagric)
            # pass

            #-------------------------------------------------------
            #-------------------------------------------------------
            # OVERLAY (BOOLEANO)

            # ClasDecliv
            clas_slope = 'C:/PyQGIS/ClasSlope_' + self.var + '.tif'
            # carregando o resultado em tela
            iface.addRasterLayer(clas_slope)

            # DegrPast
            clas_past = 'C:/PyQGIS/ClasPast_' + self.var + '.tif'
            # carregando o resultado em tela
            iface.addRasterLayer(clas_past)
            
            # AptAgric
            # saida7 em aptagric é saida8 aqui
            clas_aptagric = 'C:/PyQGIS/ClasAptAgric_' + self.var + '.tif'
            # carregando o resultado em tela
            iface.addRasterLayer(clas_aptagric)

             # Resultado Final (seleção de áreas para agricultura)
            select_agric = 'C:/PyQGIS/SelectAgric_' + self.var + '.tif'

            #  Overlay (booleano) ClasDecliv, DegrPast, AptAgric
            processing.run("native:rasterbooleanand", {
                'INPUT': [clas_slope, clas_past, clas_aptagric],
                'REF_LAYER': clas_slope,
                'NODATA_AS_FALSE': False,
                'NO_DATA': 0,
                'DATA_TYPE': 1,
                'OUTPUT': select_agric})
            
            # carregando o resultado em tela
            iface.addRasterLayer(select_agric)

            # Resultado Final (seleção de áreas para agricultura)
            area_select_agric = 'C:/PyQGIS/Area_SelectAgric_' + self.var + '.tif'

            # Classifica por limite de área (ha)
            processing.run(
            "grass7:r.reclass.area",
            {'input': select_agric,
            'value':self.area_min,
            'mode':1,
            'method':0,
            '-c':False,
            '-d':False,
            'output':area_select_agric,
            'GRASS_REGION_PARAMETER':None,
            'GRASS_REGION_CELLSIZE_PARAMETER':0,
            'GRASS_RASTER_FORMAT_OPT':'',
            'GRASS_RASTER_FORMAT_META':''})
            
             # carregando o resultado em tela
            iface.addRasterLayer(area_select_agric)

            pass
